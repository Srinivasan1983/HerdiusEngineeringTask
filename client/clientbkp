package main

import (
	"HerdiusEngineeringTask/proto"
	"context"
	"fmt"
	"io"
	"log"

	"google.golang.org/grpc"
)

func main() {
	config := proto.GetSettings()

	cc, err := grpc.Dial(config.Address, grpc.WithInsecure())
	if err != nil {
		log.Fatalf("Could not connect: %v", err)
	}

	defer cc.Close()

	c := proto.NewFindMaxNumServiceClient(cc)

	findMaxNumber(c)
}

func findMaxNumber(c proto.FindMaxNumServiceClient) {

	fmt.Println("Starting to do a Client Streaming RPC...")
	stream, err := c.FindMaximumNum(context.Background())
	if err != nil {
		log.Printf("Error while creating stream: %v", err)
		return
	}
	waitc := make(chan struct{})

	go func() {
		numbers := []int32{1, 5, 3, 6, 2, 20}
		log.Printf("Input Stream: %v\n", numbers)
		for _, num := range numbers {
			stream.Send(&proto.FindMaximumNumRequest{
				Num: num,
			})
		}
		stream.CloseSend()
	}()

	go func() {
		for {
			res, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				log.Fatalf("Error while receiving: %v", err)
				break
			}
			fmt.Printf("Received: %d\n", res.GetNum())
		}

		close(waitc)
	}()

	<-waitc

}
